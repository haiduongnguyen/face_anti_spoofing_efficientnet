def show_image_size_survey():
    """
    task 1 : show result of survey image size
    """
    import os 
    import cv2
    import matplotlib.pyplot as plt
    from tqdm import tqdm
    import sys


    def show_graph(d:dict):
        """
        this function read data from a python dict
        then draw a graph to visualize data in dict
        """
        x = []
        y = []
        for key, value in d.items():
            x.append(str(key))
            y.append(value)

        x_pos = [i for i, _ in enumerate(x)]
        plt.figure()
        plt.bar(x_pos, y, color='green')
        plt.xlabel("Size")
        plt.ylabel("Number of images")
        plt.title("Count by size = width + height ")
        plt.xticks(x_pos, x)

    size_train= {'<100': 1077, '100-200': 17298, '200-300': 36400, '300-400': 42121, '400-500': 39558, '500-600': 34338, '600-700': 19799, '>700': 33470}
    size_test = {'0-100': 219, '100-200': 3483,'200-300': 6772, '300-400': 6289, '400-500': 7343, '500-600': 5800, '600-700': 4109, '>700': 10378}

    show_graph(size_train)
    show_graph(size_test)
    plt.show()


def show_tpr_fpr_graph(spoof_score_txt):
    """
    spoof_score_txt is a file being generated by run evaluate
    this function take the path as input, and show result to screen
    """
    import numpy as np
    import os
    from eer_calculation import cal_metric
    with open(spoof_score_txt, 'r') as f:
        spoof_score = np.array(f.read().splitlines(), dtype=np.float)
    # print(spoof_score.shape)

    # test set has number live sample : 20955
    # test set has number spoof sample : 23438
    count_live = 20955
    count_spoof = 23438
    # count_spoof = 23437

    labels = np.array([0]*count_live + [1]*count_spoof, dtype=np.float)

    result_spoof = cal_metric(labels, spoof_score)
    print('eer spoof is : ' + str(result_spoof[0]) )
    print('tpr spoof is : ' + str(result_spoof[1]) )
    print('auc spoof is : ' + str(result_spoof[2]) )
    print('threshold for eer is : ' + str(result_spoof[4]) )

    # class_predcit = np.round(spoof_score)
    threshold_spoof = result_spoof[4]
    # threshold = 0.5
    class_predict = np.array(np.where(spoof_score < threshold_spoof, 0, 1))

    temp = 0
    for i in range(labels.shape[0]):
        if class_predict[i] == labels[i]:
            temp += 1

    acc = round(temp/labels.shape[0], 4)
    print(f"acc of model at threshold {threshold_spoof} is {acc}: ")


def get_input_shape_model():
    from keras.models import load_model
    import numpy as np
    model_path = '/home/duong/project/pyimage_research/result_model/version_2/fail_augmentation/result_new_b4_ver01/cp_02.h5'
    my_model = load_model(model_path)
    print(my_model.summary())
    input_model = my_model.input_shape
    width , height = input_model[1], input_model[2]
    print(width, height)
    # print(input_model.shape)


if __name__ == '__main__':
    # task 1: survey in image size
    # show_image_size_survey()

    ## task 2: show fnr, tpr, threshold graph
    # # spoof_score_txt = '/home/duong/project/pyimage_research/result_model/version_2/result_photo_attack_f19_project/b0_ver_2/test_cp_16/score_prediction.txt'
    # spoof_score_txt = '/home/duong/project/pyimage_research/result_model/version_2/result_photo_attack_f19_project/b4_ver_1/test_cp_02/score_prediction.txt'

    # show_tpr_fpr_graph(spoof_score_txt)


    # task 3: load model and get input shape of model
    # get_input_shape_model()
    
    # task 4:
    # import os
    # img_folder =  '/home/duong/project/pyimage_research/image/version_2/image_to_test'
    # count = 0
    # for img_name in os.listdir(img_folder):
    #     if 'predict' in img_name:
    #         os.remove(os.path.join(img_folder, img_name))
    #     count += 1
    # print(count)